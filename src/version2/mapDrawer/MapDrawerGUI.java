package version2.mapDrawer;

import version2.mapDrawer.tools.MapDrawerTool;
import version2.mapDrawer.tools.ToolsManager;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;

public class MapDrawerGUI extends JFrame implements KeyListener {
	private JPanel contentPane;
	private DrawingCanvas drawingCanvas;

	private List<Integer> activeKeys;
	private List<JToggleButton> toolToggleButtons;

	private JToolBar toolBar;
	private selectOnlyOneToolbar selectOneTool;
	private ToolsManager toolsManager;
    private GraphicsObjectTracker graphicsObjectTracker;

    private ActionListener toolButtonListener;

    // TODO: java global var for checking and calling vars
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		// Main method generated by eclipse
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					// set the system's Look and Feel
					UIManager.setLookAndFeel(UIManager
							.getSystemLookAndFeelClassName());
					MapDrawerGUI frame = new MapDrawerGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public MapDrawerGUI() {

		// initialize arrays & other things

		activeKeys = new ArrayList<Integer>();
		toolToggleButtons = new ArrayList<JToggleButton>();

        graphicsObjectTracker = new GraphicsObjectTracker();
		toolsManager = new ToolsManager(graphicsObjectTracker);
		
		// GUI built with Eclipse's window builder

		setTitle("Map Planner");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 800, 600);

		addKeyListener(this);

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);

		JMenuItem mntmExit = new JMenuItem("Exit");
		mntmExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				System.exit(0);
			}
		});

		mnFile.add(mntmExit);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));

		// Creates and adds the drawing canvas
		drawingCanvas = new DrawingCanvas(graphicsObjectTracker);
		contentPane.add(drawingCanvas);
        drawingCanvas.addMouseInput(toolsManager);


		// Create Action Listener for JavaButtons
		toolButtonListener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (e.getSource() instanceof JToggleButton) {
					selectOneTool.setSelectedTool((JToggleButton) e.getSource());
                    toolsManager.setTool(e.getActionCommand());
				}
			}
		};

		// Creates Java Toolbar

		toolBar = new JToolBar();
		toolBar.setOrientation(SwingConstants.VERTICAL);
		contentPane.add(toolBar, BorderLayout.EAST);

		// creates Tools


        toolsManager.createTools();
        newToolButton(toolsManager.getTool(0));

        // tool makes it so only one tool is selected at a time
        selectOneTool = new selectOnlyOneToolbar(toolToggleButtons.get(0));

        // adds rest of tools
        for (int i = 1; toolsManager.getTool(i) != null; i++) {
             newToolButton(toolsManager.getTool(i));
        }
    }

	private void newToolButton(MapDrawerTool tool) {
		JToggleButton tempTgglButton = new JToggleButton(tool.getToolDisplayName());
        tempTgglButton.setActionCommand(tool.getToolString());
        tempTgglButton.addActionListener(toolButtonListener);
        tempTgglButton.setFocusable(false);
        toolBar.add(tempTgglButton);
		toolToggleButtons.add(tempTgglButton);
	}

	private void checkPressedKeys() {

		// Handles KeyPresses
		for (Integer key : activeKeys) {
			switch (key) {
			case KeyEvent.VK_SPACE:

				break;

			default:
				break;
			}
		}
	}

	// Methods for Key Listener
	@Override
	public void keyPressed(KeyEvent e) {
		if (activeKeys.indexOf(e.getKeyCode()) == -1) {
			activeKeys.add(e.getKeyCode());
		}

	}

	@Override
	public void keyReleased(KeyEvent e) {
		activeKeys.remove((Object) e.getKeyCode());

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// activeKeys.remove((Object) e.getKeyCode());
		// TODO: Change this for lower fps
	}

	// Class that is used only here to keep only one selectedtoolbar:
	private class selectOnlyOneToolbar {
		public selectOnlyOneToolbar(JToggleButton buttonIn) {
			buttonSelected = buttonIn;
			buttonIn.setSelected(true);
		}

		private JToggleButton buttonSelected;

		public void setSelectedTool(JToggleButton buttonIn) {
			buttonSelected.setSelected(false);
			buttonSelected = buttonIn;
		}

	}

}
